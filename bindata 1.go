// Code generated by go-bindata.
// sources:
// config/atna-master.yaml
// config/atna-registry.yaml
// config/configMap.yaml
// config/project-atna.yaml
// config/repo.yaml
// config/service-account.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configAtnaMasterYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xbd\x6a\xc3\x40\x10\x84\x7b\x3d\xc5\x75\xae\x24\xe1\xf6\x3a\x91\x04\x5c\x84\x10\x4c\x92\x36\xac\xef\xc6\xd6\xd9\xf7\xc7\xee\x4a\xe0\xb7\x0f\xb2\x1c\x62\x52\xde\xb0\xf3\xdd\xcc\x50\x0d\x5f\x60\x09\x25\x5b\x43\x7c\x2a\x95\xcb\xb9\x0b\xa5\x9f\xb7\x14\xeb\x48\xdb\xe6\x12\xb2\xb7\x66\xa8\x35\x06\x47\x1a\x4a\x6e\x12\x94\x3c\x29\xd9\xc6\x98\x4c\x09\xd6\x90\x66\x6a\x13\x89\x82\xef\x9a\x54\x72\x58\x89\xce\x37\x52\xe1\x96\xeb\x05\x0e\xa7\xff\x0d\x52\x26\x76\x58\x0e\x8c\x61\xd4\xf2\xb9\x7f\xb5\x66\x33\xaa\x56\xb1\x7d\x7f\x0a\x3a\x4e\x87\xce\x95\xd4\x7b\xcc\xc4\x74\xa6\x56\xd2\x77\x56\x8d\xea\xfb\xe1\xe3\x6d\x68\x9f\x4a\x8c\x70\x5a\xb8\xdd\x21\xa6\xcd\x0d\x54\x49\x47\x6b\x12\xe5\x70\x84\xa8\xf4\x97\xe9\x00\xce\x50\x48\xcb\x58\x7f\x94\xde\xfd\x1a\xe5\xe6\x51\xe2\x13\x74\x8f\x39\xac\x83\xec\x5e\x86\xe7\xc6\x18\x0f\xd1\x90\x6f\xe5\xd7\x90\x02\x9e\xc1\x0f\x19\xff\xe0\x9d\xc7\x91\xa6\xa8\x9d\xcc\x6e\x0d\xf2\x38\x87\x66\x5a\xfa\x5e\xb3\x7b\x2f\x31\xb8\xeb\x8a\xa3\x49\x4b\x22\x85\x5f\x9f\xcb\x4e\x53\x86\x35\xca\x13\xee\x8a\x20\x1e\x77\xa0\x78\x17\x7f\x02\x00\x00\xff\xff\x3f\xca\x28\xc8\xb6\x01\x00\x00")

func configAtnaMasterYamlBytes() ([]byte, error) {
	return bindataRead(
		_configAtnaMasterYaml,
		"config/atna-master.yaml",
	)
}

func configAtnaMasterYaml() (*asset, error) {
	bytes, err := configAtnaMasterYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/atna-master.yaml", size: 438, mode: os.FileMode(420), modTime: time.Unix(1726472244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configAtnaRegistryYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\xcf\x6e\xa3\x3a\x18\x47\xf7\x3c\x05\xea\x3e\xbd\x38\x29\xe9\x0d\x52\x17\x93\x16\x08\x4c\x20\xc3\x1f\xdb\xe0\x9d\xb1\xdd\xc1\x01\x1b\x06\x48\x13\xf2\xf4\x23\xaa\x8e\x46\x9a\xdd\x27\x9d\xa3\xb3\xf8\x7e\xb4\x97\x48\x0c\xa3\xec\xb4\x63\x7e\x00\x83\xd3\x89\x3a\x86\x69\x3e\xf2\x8e\x35\x62\x60\x9d\x7e\x97\x3f\xcf\xe3\x42\xc5\x1c\xd6\xbc\x48\x3b\x36\x07\xdb\xcf\xdb\xb7\x6b\xe6\xef\xce\x47\xe5\x6d\x79\x11\xb6\xe5\x26\xb8\x50\xfc\xbf\x3c\xe9\x51\xf2\x22\x6e\x99\xb2\xeb\x0a\x43\x79\x92\x7f\xdd\x40\x5e\x25\xf3\xbd\x3b\xdb\xf0\x0f\xa6\x92\x85\xf5\x1c\xdf\x5e\xf3\xf3\xfe\xc4\x41\x9a\x23\x3f\xb2\x12\x2b\x0e\x84\x7b\xf3\xa8\xdf\xd8\x99\xae\x0b\x74\x08\xfb\xb8\x01\xf4\xb8\x49\x53\x84\x49\x1b\xc3\xf8\x18\xbd\xb1\x21\x81\x71\x96\xac\xfb\x03\x01\xdf\xd6\x4b\x97\x60\x50\x53\x7c\x5d\x9a\x0d\x29\x48\xcd\x94\xf7\xab\xcc\xec\x7b\x05\xf7\xba\xf2\x77\xb2\xc4\xd7\x4b\xa5\x53\x6b\x71\xcb\x02\x59\xf4\x35\xd8\x06\x6d\x5b\x42\x8d\x08\x76\xc3\x35\x2e\xfa\x2b\xf3\xd3\x42\xb8\x31\xa4\x4d\xf8\x83\xbc\x79\x19\xf2\xc8\x21\xcf\xf7\x69\xe4\xda\x21\x81\xe8\x29\x55\xde\x81\xde\x51\x5e\xa9\xba\x44\x4d\xfd\x9d\xb9\xf6\x10\x61\x2f\x8a\x40\x98\xa1\x96\xd3\xca\xb5\x51\xde\xdc\xe2\xd4\x8f\x67\x88\xd0\x09\x02\x77\x66\x6e\x4d\x23\xe8\xce\x81\x06\xbb\xf7\xe4\xe5\xc5\x68\xa4\xe6\x8e\x99\x09\x36\x88\xc9\x50\x62\xa2\x7f\x9e\xce\x06\x41\x27\xd9\xe9\x5c\x2a\x31\x4e\x54\xf5\x8e\xf9\xb0\xb6\xd6\x4f\x2b\x6b\xb7\x02\xdb\xdc\x7a\x76\x36\x5b\x07\x3c\x93\x07\xc3\x34\x35\x55\xc2\x31\xe9\xa4\xe9\xaa\xef\xd8\x6a\xfc\xac\x8d\xe0\x8b\x8c\x3d\x65\x5f\xd8\x98\xe6\x5e\x38\x66\x73\xa9\xc4\xa0\xc5\x24\xc6\x47\xd9\xfd\xf7\xef\xba\xc6\xef\x00\x00\x00\xff\xff\xbe\x59\xa7\xb6\x07\x02\x00\x00")

func configAtnaRegistryYamlBytes() ([]byte, error) {
	return bindataRead(
		_configAtnaRegistryYaml,
		"config/atna-registry.yaml",
	)
}

func configAtnaRegistryYaml() (*asset, error) {
	bytes, err := configAtnaRegistryYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/atna-registry.yaml", size: 519, mode: os.FileMode(420), modTime: time.Unix(1726472244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xd2\xcd\x6e\xd4\x30\x10\x07\xf0\xbb\x9f\x62\x34\x97\xbd\xac\x4b\xbe\x49\xe6\x80\x84\x96\x56\xdd\x03\x54\x42\x4b\x41\x5c\xd0\xd4\x99\x22\xab\x89\x13\x62\xa7\x42\x5a\xed\xbb\x23\x67\xdb\x2d\xb4\xf4\x14\x25\xf3\xf1\xff\xc5\x32\x8f\xf6\x5a\x26\x6f\x07\x47\x70\x9f\xaa\x96\x03\x93\x02\xb8\x3e\xff\xbc\xbd\xd8\x6e\xde\xef\xb6\x57\x9f\x7e\x6c\xae\x3e\x9c\x13\x5c\x7e\xdd\xea\xac\x48\x9a\xa4\xd4\x17\xbf\x2e\x2b\xf3\x7b\xe6\x50\x7e\x53\x77\xd6\xb5\x04\x9b\xc1\xdd\xda\x9f\x1f\x79\x54\xbd\x04\x7e\xdc\xc2\xce\x0d\x81\x83\x1d\x9c\x8f\xaf\x00\x77\xf3\x8d\x98\xd0\x9d\xc5\xe7\xe4\x24\x88\x3f\xb3\xc3\x9b\x8e\x7d\xd0\x3c\x8e\x9d\x95\x56\x9b\x65\xd3\x3c\x2d\x63\x04\xef\x96\x39\x80\x3d\x3e\x49\x91\xf0\x3e\xc5\x35\xc6\x18\xa4\x3d\xbe\xc0\x22\xe1\x7f\xb5\x5f\xf0\xb0\xc6\x08\x46\xc2\x93\x18\xd7\xf8\x68\x8e\xcb\xfe\x32\x23\xed\x0f\x6b\xec\xf8\x46\x3a\xbf\x94\xc6\xf1\x99\xdc\x3a\x1f\xd8\x19\x41\x42\x0e\x8e\xb5\x19\xba\x4e\x4c\x18\xa6\x18\xe4\xb8\x7f\x59\x78\xf8\xbf\x7e\xc9\x8d\x1d\x7e\xe4\xd3\x3c\x1e\x0e\x0a\xc0\x4c\xb2\xe4\xef\x6c\x2f\x3e\x70\x3f\x12\xac\xb2\x24\x2b\x74\xd2\xe8\xb4\xd8\x25\x15\xa5\x35\x95\xf5\xf7\x95\x02\x38\xe2\x8e\x87\xfb\x3a\x8f\xe0\x5f\x84\x02\x88\xd1\xcf\x3f\x3f\xd9\x1e\x1a\x16\xdb\xb1\x4b\x01\x4c\xe2\x87\x79\x32\x72\xba\x2f\xab\xbc\xaa\x8b\xa2\x8e\x8e\xd9\xb6\x04\x62\xea\x46\x24\x65\x2d\x79\x7e\xab\x8b\x26\xaf\x74\xf3\x36\xc9\x74\x5a\x72\xd5\x36\x25\xe7\x75\x95\xa9\x3f\x01\x00\x00\xff\xff\xc8\x26\x0f\x12\x71\x02\x00\x00")

func configConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigmapYaml,
		"config/configMap.yaml",
	)
}

func configConfigmapYaml() (*asset, error) {
	bytes, err := configConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/configMap.yaml", size: 625, mode: os.FileMode(420), modTime: time.Unix(1726472244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configProjectAtnaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x54\x31\x6f\xdc\x3c\x0c\xdd\xfd\x2b\x88\x64\xc8\xf7\x15\x70\x8a\xac\xde\x0e\xe9\xd8\xa1\x08\x82\x76\xe6\x49\x3c\x9b\xa9\x2d\x0a\x22\x2f\x87\xfb\xf7\x85\x2c\x3b\xb1\x53\xb4\x05\xba\x5c\x80\xda\xa3\x48\x3e\xbe\xf7\x64\x3d\x8c\xfc\x95\x92\xb2\x84\x06\x30\xb5\x12\x93\x3c\xdd\xb2\x7c\x7c\xbe\xc3\x3e\x76\x78\x57\x7d\xe7\xe0\x1b\xd8\xc5\xf8\x25\xc9\x13\x39\xab\x06\x32\xf4\x68\xd8\x54\x00\xd7\xf0\xd8\x11\x04\x1c\x08\xe4\x00\xd6\x11\xc4\xd2\x05\x27\xb6\x8e\x03\xec\x52\x2b\x70\xff\xe9\xb6\x82\xb1\xab\x01\xb4\x80\xf5\x80\x6a\x94\x56\xf3\x1a\xd1\x11\x9c\x3a\x4a\xb4\xc2\x61\x05\x4f\x07\x0e\xe4\x67\x8c\xb1\xb3\x90\x75\xbe\xd2\x48\xae\x30\xd9\xc1\x3e\x31\x1d\xc0\x93\xba\xc4\xd1\x58\xc2\x1b\x52\x19\x61\x51\x6d\xe0\x6a\xd2\x04\x4e\x82\x21\x07\x0e\x2d\xec\x1e\xc3\x0e\x30\xc6\x9e\x1d\xe6\xae\xab\x11\xfc\x33\xab\x65\x34\x95\x63\x72\x04\x89\xa2\x28\x9b\x24\x26\x05\xec\x7b\x39\x91\x87\x83\x24\xb0\x8e\x75\xb9\xee\x1a\x6e\x3e\xdc\x94\x0e\x05\x0c\xe7\xd7\xc9\x73\x2e\x17\xb8\x87\x7c\x96\x45\x00\xd4\xb9\x7f\xb5\xd1\x93\x1a\x87\x91\x8a\xc2\x7f\xae\x3f\x66\xeb\x32\x96\x7f\x75\x43\xff\x9f\x9c\x5b\xf0\x56\x70\x18\x60\x4f\xe0\x29\xf6\x72\x2e\xfe\xad\xe8\x94\xc2\x40\xc1\xc0\x64\x24\x37\xa1\xaf\xc1\x27\xd7\x5e\x48\xcc\x44\x17\x77\x51\x38\xe7\x4f\x29\x3d\x53\x6a\x7e\x52\x31\x21\xd7\xea\x24\x92\x87\x44\x45\xb9\x82\x75\x68\x80\x99\xfa\xe4\xa2\x49\x26\x3d\x60\xc0\x96\x3c\xec\xcf\x6b\x4d\x1c\xfe\x6c\x71\x9b\xe4\x18\x47\x0d\xf9\xdf\xfd\xdd\xf6\x3c\x3e\xd5\x1e\xa6\xb3\x6f\x1d\x1b\xf5\xac\x36\xcb\x1c\xd1\x96\x12\xcb\x83\x78\x2b\xf0\xc5\x8d\x0b\x49\xfc\xf5\xfe\xd5\xbb\xf9\x1b\x99\x75\x5d\x57\x17\x89\x09\x27\x7d\x4f\xce\xe4\x3d\x27\xc5\xfd\xcc\x71\x75\x89\x5b\x68\x6c\xa1\xb1\x85\xc6\x45\x42\x23\x8f\xef\x51\xe9\x1d\x67\xc6\x4c\x71\x4b\x89\x2d\x25\xfe\xe9\x94\xf8\x11\x00\x00\xff\xff\x33\x5c\x3d\x05\x7d\x0c\x00\x00")

func configProjectAtnaYamlBytes() ([]byte, error) {
	return bindataRead(
		_configProjectAtnaYaml,
		"config/project-atna.yaml",
	)
}

func configProjectAtnaYaml() (*asset, error) {
	bytes, err := configProjectAtnaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/project-atna.yaml", size: 3197, mode: os.FileMode(420), modTime: time.Unix(1726472244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configRepoYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x90\xc9\x6e\xea\x30\x14\x86\xf7\x7e\x0a\xbf\x80\xc9\x0d\x97\x20\xae\x77\xb9\x2d\x2d\x83\xca\xa0\x42\x5a\xd8\x44\x87\xd8\x80\xc1\xb1\x5d\xfb\x30\xf5\xe9\xab\x34\xa8\x52\xd5\x5d\x57\xac\x2c\x9d\xdf\xff\xa0\x0f\x9c\xca\xa4\x0f\xca\x1a\x4e\x8f\x31\xd9\x2b\x23\x38\x7d\x96\x85\x97\x48\x4a\x89\x20\x00\x81\x13\x4a\x0d\x94\x92\x53\x40\x03\xcc\x4b\x67\x63\x16\xea\x3f\xb5\x12\x1c\x14\x95\xec\x37\xb6\x10\x84\x52\x0d\x2b\xa9\x43\xe5\xa3\xd7\x63\xa3\x7a\x9c\xb7\xbb\x86\xb2\x51\xed\x65\x78\x71\x92\xd3\x2a\x2e\x28\xb4\xfe\x42\x02\x7a\x65\x36\xf7\xd7\xca\x83\xd7\x9c\x6e\x11\x5d\xe0\x51\xb4\x51\xb8\x3d\xac\x1a\x85\x2d\x23\x21\x8f\xe0\x61\x07\x2c\x94\xb9\x41\xd4\x28\xa2\x74\x36\x4a\xd9\x9d\xd5\x5a\x16\x68\x3d\xeb\x49\x5d\x7e\xdb\x5c\xa5\x05\xe9\xeb\xc3\x4f\x3f\xa1\xd4\x41\x08\x27\xeb\x05\xa7\x75\x53\xee\x00\xf3\x38\x4e\xff\x4e\xdb\x83\x65\xfa\x27\x4b\xe6\xe7\x56\xbf\xd3\xea\xb6\x4d\x9a\xcf\xbb\xe9\x6c\xfa\x5e\x24\xff\xcf\x8b\xfe\x69\x30\x4f\x93\xb1\x6b\xbf\x0e\x1f\x47\x67\xec\xbd\x41\xdc\xf9\xd7\x54\x98\x4d\x32\x2b\xd6\x93\xe3\x6c\xb9\x18\x8e\x1e\x5e\x16\xfb\xa7\x56\x32\x3d\x84\x31\x61\x8c\x91\x5f\x32\x6f\xde\x16\xf3\xcf\x5d\xc5\x17\xf3\x12\x8c\x5a\xcb\x80\xb7\xc9\xfd\x23\x00\x00\xff\xff\x10\xdf\x83\x23\xe7\x02\x00\x00")

func configRepoYamlBytes() ([]byte, error) {
	return bindataRead(
		_configRepoYaml,
		"config/repo.yaml",
	)
}

func configRepoYaml() (*asset, error) {
	bytes, err := configRepoYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/repo.yaml", size: 743, mode: os.FileMode(420), modTime: time.Unix(1726472244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x31\x4f\xc4\x30\x0c\x85\xf7\xfc\x8a\xa8\x33\x29\x62\x43\xd9\x60\x61\x3f\x24\x16\x74\x83\x9b\x98\x62\xae\x8d\x23\x27\xe9\xc0\xaf\x47\xcd\x95\xaa\xd2\x55\x08\x10\x03\x53\x22\xe7\x29\xef\xbd\xcf\x10\xe9\x09\x25\x11\x07\xab\xa7\x1b\x75\xa2\xe0\xad\x7e\x44\x99\xc8\xe1\x9d\x73\x5c\x42\x56\x23\x66\xf0\x90\xc1\x2a\xad\x03\x8c\x68\x35\xe4\x00\x26\x9d\x55\x06\x16\xd9\xf9\x31\x45\x70\x8b\x42\x19\x63\xd4\xd6\x40\x3a\x70\x2d\x94\xfc\xca\x42\xef\x90\x89\x43\x7b\xba\x4d\x2d\xf1\xf5\x6a\x7d\xe0\x01\x2f\x0c\xb7\x7f\x7e\x46\x88\xec\xcd\x08\x01\x7a\x14\x25\x65\xc0\x64\x95\xd1\x10\xe9\x41\xb8\xc4\x64\xf5\x73\xd3\x1c\x95\xd6\x82\x89\x8b\x38\xac\x93\xc8\x3e\xd5\xe9\x84\xd2\xd5\x49\x8f\xb9\xb9\xd2\xcd\x40\xa9\x9e\x4e\x10\x32\xce\x37\x8f\x03\x66\x6c\x8e\xbf\xed\x70\x4f\xc1\x53\xe8\x77\xd8\x6d\x82\x9b\x6e\x51\x5d\xd6\x4c\xa5\x7b\x43\x97\x6b\xab\xdd\xa5\xfc\x70\x15\xc2\x03\x1e\xf0\x65\x8e\xb1\x01\xbd\x07\x53\xaf\x14\xbf\x28\xfb\xf7\x58\x6a\x8f\x39\xe5\xbf\x81\xb2\x26\xfa\x26\x92\x8f\x00\x00\x00\xff\xff\xb5\x8a\x72\x12\x4b\x03\x00\x00")

func configServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_configServiceAccountYaml,
		"config/service-account.yaml",
	)
}

func configServiceAccountYaml() (*asset, error) {
	bytes, err := configServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/service-account.yaml", size: 843, mode: os.FileMode(420), modTime: time.Unix(1726838333, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/atna-master.yaml": configAtnaMasterYaml,
	"config/atna-registry.yaml": configAtnaRegistryYaml,
	"config/configMap.yaml": configConfigmapYaml,
	"config/project-atna.yaml": configProjectAtnaYaml,
	"config/repo.yaml": configRepoYaml,
	"config/service-account.yaml": configServiceAccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"atna-master.yaml": &bintree{configAtnaMasterYaml, map[string]*bintree{}},
		"atna-registry.yaml": &bintree{configAtnaRegistryYaml, map[string]*bintree{}},
		"configMap.yaml": &bintree{configConfigmapYaml, map[string]*bintree{}},
		"project-atna.yaml": &bintree{configProjectAtnaYaml, map[string]*bintree{}},
		"repo.yaml": &bintree{configRepoYaml, map[string]*bintree{}},
		"service-account.yaml": &bintree{configServiceAccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

