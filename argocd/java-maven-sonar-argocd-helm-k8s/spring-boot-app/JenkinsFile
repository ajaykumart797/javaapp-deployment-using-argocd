pipeline {
  agent {
    docker {
      image 'abhishek976772/spring-boot-app:v4'
      args '--entrypoint="" -u root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'main', url: 'https://github.com/ajaykumart797/Ultimate_CI-CD_pipeline'
      }
    }
    stage('Check Workspace') {
      steps {
        sh 'ls -R'
      }
    }
    stage('Build and Test') {
      steps {
        // Debug step to check Java version
        sh 'java -version'
        // Debug step to check Maven version
        sh 'mvn -version'
        sh 'ls -ltr'
        // Debug step to print current working directory
        sh 'pwd'
        // Build the project and create a JAR file
        sh 'cd argocd/java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://172.23.66.143:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd argocd/java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "abhishek976772/spring-boot-app:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh 'cd argocd/java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Ultimate_CI-CD_pipeline"
        GIT_user = "ajaykumart797"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          dir('argocd/java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests') {
            sh '''
              echo "Current directory: $(pwd)"
              ls -la
              # Check if .git directory exists
              if [ -d ".git" ]; then
                echo ".git directory exists"
              else
                echo ".git directory does not exist, initializing Git repository"
                git init
              fi
              # Verify .git directory exists after initialization
              if [ -d ".git" ]; then
                echo ".git directory exists after initialization"
              else
                echo "Failed to initialize .git directory"
                exit 1
              fi
              echo "Configuring Git user email and name"
              git -C $(pwd) config user.email "abc123@gmail.com"
              git -C $(pwd) config user.name "abc123"
              echo "Git user email and name configured"
              BUILD_NUMBER=${BUILD_NUMBER}
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" deployment.yml
              git -C $(pwd) add deployment.yml
              git -C $(pwd) commit -m "Update deployment image to version ${BUILD_NUMBER}"
              git -C $(pwd) push https://${GITHUB_TOKEN}@github.com/${GIT_user}/${GIT_REPO_NAME} HEAD:main
            '''
          }
        }
      }
    }
  }
}
